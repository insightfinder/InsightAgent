[extrahop]
# required
host = http://extrahop.example.com
api_key = 123456789abcdefghijklmnop

# this field is used for query metrics, only support "device" for now.
object_type = device
# device ip list. Multiple ips split with ','. If this options is empty, all active devices will be used. If need to specific device, append device ip to the ip with ':'.
# Example: 10.10.10.1:8589955732,10.10.10.2:8589955734
device_ip_list = 10.10.10.1,10.10.10.2:8589955734
# metrics query params, support multiple metric_category.
# device_ip_list in each metric_category is optional, if device_ip_list is not empty, agent will use these ip list to query for current metric_category.
# the device_ip_list can also contains device ip with format like ["10.10.10.1:8589955732","10.10.10.2:8589955734"]
metric_query_params = [
        {
          "metric_category": "http_server",
          "metric_specs": [
            {"name": "rsp"},
            {"name": "rsp1"},
          ],
          "cycle": "auto",
          "device_ip_list": ["10.10.10.1:8589955732","10.10.10.2"]
        },
        {
          "metric_category": "http_client",
          "metric_specs": [
            {"name": "req"},
            {"name": "req1"},
          ],
          "cycle": "auto"
        }
    ]


# history data time config. If these options is set, the agent will query results by time range
# time range, Example: 2020-04-14 00:00:00,2020-04-15 00:00:00
his_time_range =

# raw, rawtail, csv, csvtail, xls, xlsx, json, jsontail, avro, or xml
# *tail formats keep track of the current file & position + completed files in [state] below
data_format = json

## message parsing
# timestamp format, as library [arrow]. multiple fields can be formatted together to create the timestamp a la `YYYY-MM-DD HH:mm:ss ZZ`. If multiple fields could contain the timestamp, a comma-delimited list may be entered (no value of which may use the aforementioned {formatting}), of which the first found will be selected (treating the list as a priority list). ex `timestamp1,timestamp2`
timestamp_format =
# timezone, as per pytz
timezone =
timestamp_field = time
# Timezone of the timestamp data to be sent and stored in target DB (InsightFinder). Default is UTC. Only if you wish the data to be stored in other time zones in InsightFinder, this field should be specified to be the desired time zone.
target_timestamp_timezone = UTC
component_field =
# instance field in data results, default is the device id(oid)
instance_field = oid
# instance_whitelist is a regex string used to define which instances will be filtered.
instance_whitelist =
device_field =
## number of thread to used in the pool, default is 20
thread_pool = 20

## proxy
agent_http_proxy =
agent_https_proxy =

[insightfinder]
user_name =
license_key =
token =
project_name =
# Name of system owned by project. If project_name is not exist in InsightFinder, agent will create a new system automatically from this field or project_name.
system_name =
# metric, metricreplay, log, logreplay, incident, incidentreplay, alert, alertreplay, deployment, deploymentreplay
project_type = log
# Set to `YES` if project is container.
containerize = no
sampling_interval = 10
run_interval = 10
# what size to limit chunks sent to IF to, as kb
chunk_size_kb = 2048
if_url = https://app.insightfinder.com
if_http_proxy =
if_https_proxy =
