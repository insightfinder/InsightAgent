[prometheus]
## prometheus info
# required
prometheus_uri = http://localhost:9090
# Basic Authentication
user =
password =
# True or False
verify_certs =
# path to ca bundle
ca_certs =
# path to client cert
client_cert =
# path to client key
client_key =

## metrics
# Metrics to query for. Multiple fields are separated by `;`. If none specified, all metrics returned from /api/v1/label/__names__/values will be used
metrics =
# metrics_whitelist is a regex string used to define which metrics will be filtered.
metrics_whitelist =
# metrics to not report
metrics_to_ignore = ALERTS,ALERTS_FOR_STATE
# label selector to use when querying for metrics, ie {namespace="monitoring"}
query_label_selector =
# label function to calculate the metric's value, now only support functions: increase. Example: query_with_function = increase
query_with_function =
# metrics_whitelist_with_function is a regex string used to define which metrics will be calculate with query_with_function. Example: metrics_whitelist_with_function = total_mem_.*
metrics_whitelist_with_function =
# metric's name field, Multiple fields are separated by commas. EX: __name__, job, the metric name =  {__name__}_{job}
metrics_name_field =

# history data time config. If these options is set, the agent will query results by time range
# time range, Example: 2020-04-14 00:00:00,2020-04-15 00:00:00
his_time_range =

# raw, rawtail, csv, csvtail, xls, xlsx, json, jsontail, avro, or xml
# *tail formats keep track of the current file & position + completed files in [state] below
data_format = json

## message parsing
# timestamp format, as library [arrow]. multiple fields can be formatted together to create the timestamp a la `YYYY-MM-DD HH:mm:ss ZZ`. If multiple fields could contain the timestamp, a comma-delimited list may be entered (no value of which may use the aforementioned {formatting}), of which the first found will be selected (treating the list as a priority list). ex `timestamp1,timestamp2`
timestamp_format =
# timezone, as per pytz
timezone =
timestamp_field =
# Timezone of the timestamp data to be sent and stored in target DB (InsightFinder). Default is UTC. Only if you wish the data to be stored in other time zones in InsightFinder, this field should be specified to be the desired time zone.
target_timestamp_timezone = UTC
component_field =
# if no instance given, the local hostname will be used. Can also use {field} formatting or a priority list.
instance_field = instance
# instance_whitelist is a regex string used to define which instances will be filtered.
instance_whitelist =
device_field =
# multiple fields are separated by commas. a field can be named with the syntax `<name>::<value>` or `<name>::==<value>`, where `<name>` and `<value>` can each be either a literal value (`name::value`) or formatted (`total time [{step}]::=={timing.end}-{timing.start}`). Use `::==` as a separator to treat `<value>` as a mathematical formula, which must be parseable by `eval()`.
data_fields =
## number of thread to used in the pool, default is 20
thread_pool = 20

## proxy
agent_http_proxy =
agent_https_proxy =

[insightfinder]
user_name =
license_key =
token =
# Name of the project created in the InsightFinder UI, If this project is not exist, agent will create it automatically.
project_name =
# Name of system owned by project. If project_name is not exist in InsightFinder, agent will create a new system automatically from this field or project_name.
system_name =
# metric, metricreplay, log, logreplay, alert, alertreplay, incident, incidentreplay, deployment, deploymentreplay, trace, tracereplay
project_type = metric
sampling_interval = 1
run_interval = 1
# what size to limit chunks sent to IF to, as kb
chunk_size_kb = 2048
if_url = https://app.insightfinder.com
if_http_proxy =
if_https_proxy =
