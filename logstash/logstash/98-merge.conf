filter {
  # Update parse flag
  if ![ts_event] or ![instance_name] or ![project_name] {
    mutate { update => { "FLAG_PARSED" => false }}
  } else {
    mutate { update => { "FLAG_PARSED" => true }}
  }

  # Convert to json encoded string
  if [FLAG_PARSED] == "true" {
    # Get epoch
    ruby { code => "event.set('epoch', event.get('ts_event').to_i * 1000)" }

        # Construct metric data following data ingestion api
    mutate {
      add_field => {
        "[metric_data][timestamp]" => "%{epoch}"
        "[metric_data][tag]" => "%{instance_name}"
        "[metric_data][data]" => "%{data}"
      }
    }

        # Encode to json
    json_encode { source => "metric_data" }

        # Aggregate events
    if [FLAG_GROUPING] == "true" {
      aggregate {
        task_id => "%{project_name}%{instance_name}"
        code => "
          map['size'] ||= 0
          map['count'] ||= 0
          map['FLAG_DEBUG'] = event.get('FLAG_DEBUG')
          map['project_name'] = event.get('project_name')
          map['agent_type'] = event.get('agent_type')
          map['user_name'] = event.get('user_name')
          map['license_key'] = event.get('license_key')
          map['groupdata'] ||= []
          map['groupdata'] << event.get('metric_data')
          map['size'] += event.get('metric_data').size
          map['count'] += 1
          map_meta.timeout = 0 if map['count'] >= 1000 or map['size'] > 999999
          event.cancel()
        "
        push_previous_map_as_event => false
        push_map_as_event_on_timeout => true
        timeout => 60
      }
    } else {
      ruby {
            code => "
                    event.set('groupdata',[event.get('metric_data')])
        event.set('count', 1)
        event.set('size', event.get('metric_data').size)
      "
          }
    }
  }
}
