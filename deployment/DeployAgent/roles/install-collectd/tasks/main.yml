---
- name : Check Mandatory Variables For Install
  debug:
    msg:
      - ProjectName:{{ projectName | mandatory }}
      - UserName:{{ userName | mandatory }}
      - Sampling Interval:{{ samplingInterval | mandatory }}
      - Agent Type:{{ agentType | mandatory }}
      - License Key:{{ licenseKey | mandatory }}
      - Update APT:{{ apt_update | mandatory }}
- name: Yum Repo | Make insightRepo Directory
  file:
    path: /var/insightRepo
    state: directory
  when: ansible_pkg_mgr == 'yum'
- name: Yum Repo | Copy RPM packages(This might take a while...)
  copy:
    src: ../files/packages/rpm/
    dest: /var/insightRepo/
    directory_mode: yes
  when: ansible_pkg_mgr == 'yum'
- name: Yum Repo | Install RPM package libxml2-python
  yum:
    name: /var/insightRepo/libxml2-python-2.9.1-6.el7_2.3.x86_64.rpm
    state: present
    disablerepo: '*'
  when: ansible_pkg_mgr == 'yum'
- name: Yum Repo | Install RPM package deltarpm
  yum:
    name: /var/insightRepo/deltarpm-3.6-3.el7.x86_64.rpm
    state: present
    disablerepo: '*'
  when: ansible_pkg_mgr == 'yum'
- name: Yum Repo | Install RPM package python-deltarpm
  yum:
    name: /var/insightRepo/python-deltarpm-3.6-3.el7.x86_64.rpm
    state: present
    disablerepo: '*'
  when: ansible_pkg_mgr == 'yum'
- name: Yum Repo | Install RPM package createrepo
  yum:
    name: /var/insightRepo/createrepo-0.9.9-26.el7.noarch.rpm
    state: present
    disablerepo: '*'
  when: ansible_pkg_mgr == 'yum'
- name : Yum Repo | Run Create Repo Command
  command: sudo createrepo /var/insightRepo
  when: ansible_pkg_mgr == 'yum'
- name: Yum Repo | Add insightfinder repo
  yum_repository:
    name: insightrepo
    description: Insightfinder Repo
    baseurl: file:///var/insightRepo
    enabled: yes
    gpgcheck: no
  when: ansible_pkg_mgr == 'yum'
- name: SELinux | Check for SELinux
  become: yes
  stat:
    path: /etc/selinux/config
  register: p
- name: SELinux | Disable SELinux
  become: yes
  selinux:
    state: disabled
  when: p.stat.exists == True
- name: Install package dependencies - YUM
  become: yes
  become_flags: '-E'
  yum:
    name: "{{item}}"
    state: latest
    disablerepo: '*'
    enablerepo: insightrepo
  with_items:
    - gcc
    - wget
    - libffi-devel
    - python-devel
    - openssl
    - epel-release
    - collectd
  when: ansible_pkg_mgr == 'yum'
- name: Install package dependencies - APT build-essential
  become: yes
  shell: "http_proxy={{ http_proxy }} apt-get install -y -f --allow-unauthenticated build-essential"
  when: ansible_pkg_mgr == 'apt'
- name: Install package dependencies - Add Open SUSE Backports Repo
  become: yes
  shell: "http_proxy={{ http_proxy }} zypper rr openSUSE_Backports_SLE-12-SP2 && zypper addrepo http://download.opensuse.org/repositories/openSUSE:/Backports:/SLE-12-SP2/standard/openSUSE:Backports:SLE-12-SP2.repo"
  when: ansible_pkg_mgr == 'zypper'
- name: Install package dependencies - Add Open SUSE Server Monitoring Repo
  become: yes
  shell: "http_proxy={{ http_proxy }} zypper rr server_monitoring && zypper addrepo http://download.opensuse.org/repositories/server:monitoring/SLE_12_SP3/server:monitoring.repo"
  when: ansible_pkg_mgr == 'zypper'
- name: Install package dependencies - Add Open SUSE OSS Repo
  become: yes
  shell: "http_proxy={{ http_proxy }} zypper rr OpenSUSE-12.1-OSS && zypper ar http://download.opensuse.org/distribution/12.1/repo/oss/ OpenSUSE-12.1-OSS"
  when: ansible_pkg_mgr == 'zypper'
- name: Install package dependencies - Refresh Repos
  become: yes
  shell: "http_proxy={{ http_proxy }} zypper --no-gpg-checks refresh"
  when: ansible_pkg_mgr == 'zypper'
- name: Install package dependencies - Basis-Devel
  become: yes
  shell: "http_proxy={{ http_proxy }} zypper install --auto-agree-with-licenses -y --type pattern Basis-Devel"
  when: ansible_pkg_mgr == 'zypper'
- name: Install package dependencies - python-pip
  become: yes
  shell: "http_proxy={{ http_proxy }} zypper install --auto-agree-with-licenses -y python-pip"
  when: ansible_pkg_mgr == 'zypper'
- name: collectd-install | Get Collectd
  become: yes
  shell: "http_proxy={{ http_proxy }} wget http://collectd.org/files/collectd-{{collectd_version}}.tar.gz"
  register: collectd_source
  when: ansible_pkg_mgr == 'zypper'
- name: collectd-install | Extract Collectd
  shell: "tar xvf collectd-{{collectd_version}}.tar.gz -C /usr/src"
  when: collectd_source.changed and ansible_pkg_mgr == 'zypper'
- name: collectd-install | Install Collectd
  shell: ./configure --prefix={{collectd_prefix}} && make all install
  args:
    chdir: /usr/src/collectd-{{collectd_version}}
    creates: "{{collectd_prefix}}"
  when: collectd_source.changed and ansible_pkg_mgr == 'zypper'
- name: collectd-configure | Configure Collectd
  template: src=collectdsample.conf dest={{collectd_config_file}} validate='{{collectd_sbin_path}}/collectd -t -C %s'
  when: ansible_pkg_mgr == 'zypper'
- name: collectd-configure | Ensure conf.d directory
  file: path={{collectd_config_dir}} state=directory
  when: ansible_pkg_mgr == 'zypper'
- name: collectd-configure | Configure additional types
  template: src=types.db.j2 dest={{collectd_additional_types_db_path}}
  when: ansible_pkg_mgr == 'zypper'
- name: collectd-configure | Setup Collectd service
  template: src=systemd.service.j2 dest=/etc/systemd/system/collectd.service
  when: ansible_pkg_mgr == 'zypper'
- name: collectd-configure | Ensure the Collectd is enabled and started
  service: name=collectd state=started enabled=yes
  when: ansible_pkg_mgr == 'zypper'
- name: collectd-configure | Setup logs rotation
  template: src=logrotate.conf.j2 dest=/etc/logrotate.d/collectd.conf
  when: collectd_logpath and collectd_logrotate and ansible_pkg_mgr == 'zypper'
- name: Install package dependencies - APT libssl-dev
  become: yes
  shell: "http_proxy={{ http_proxy }} apt-get install -y -f --allow-unauthenticated libssl-dev"
  when: ansible_pkg_mgr == 'apt'
- name: Install package dependencies - APT libffi-dev
  become: yes
  shell: "http_proxy={{ http_proxy }} apt-get install -y -f --allow-unauthenticated libffi-dev"
  when: ansible_pkg_mgr == 'apt'
- name: Install package dependencies - APT python-dev
  become: yes
  shell: "http_proxy={{ http_proxy }} apt-get install -y -f --allow-unauthenticated python-dev"
  when: ansible_pkg_mgr == 'apt'
- name: Install package dependencies - APT collectd
  become: yes
  shell: "http_proxy={{ http_proxy }} apt-get install -y -f --allow-unauthenticated collectd"
  when: ansible_pkg_mgr == 'apt'
- name: Delete Old Tar Bundle for Agent
  become: yes
  file:
    state: absent
    path: "{{ansible_env.HOME}}/insightagent.tar.gz"
- name: Delete Old Agent Code
  become: yes
  file:
    state: absent
    path: "{{ansible_env.HOME}}/InsightAgent-master"
- name: Delete ifagent Cron Configuration
  become: yes
  file:
    state: absent
    path: /etc/cron.d/ifagent
- name: Copy Agent Code on Machines
  become: yes
  copy:
    src: ../files/insightagent.tar.gz
    dest: "{{ansible_env.HOME}}"
    owner: root
    group: root
    mode: 0644
- name: Untar the Agent Code
  unarchive:
    src: "{{ansible_env.HOME}}/insightagent.tar.gz"
    dest: "{{ansible_env.HOME}}"
    remote_src: True
- name: Check for /etc/collectd
  stat: path=/etc/collectd
  register: collectd_dir
- name: Copy collectd configuration file to "/etc/collectd/collectd.conf"
  become: yes
  command: cp -rf {{ansible_env.HOME}}/InsightAgent-master/deployment/DeployAgent/files/collectdsample.conf /etc/collectd/collectd.conf
  when: collectd_dir.stat.exists and ansible_pkg_mgr != 'zypper'
- name: Copy collectd configuration file to "/etc/collectd.conf"
  become: yes
  command: cp -rf {{ansible_env.HOME}}/InsightAgent-master/deployment/DeployAgent/files/collectdsample.conf /etc/collectd.conf
  when: ansible_pkg_mgr != 'zypper'
- name: Restart collectd
  service:
   name: collectd
   state: restarted
  become: true
- name: Untar the Agent Code
  unarchive:
    src: "{{ansible_env.HOME}}/insightagent.tar.gz"
    dest: "{{ansible_env.HOME}}"
    remote_src: True
- name: Copy Pip packages on Machines
  become: yes
  copy:
    src: ../files/pip_packages.tar.gz
    dest: "{{ansible_env.HOME}}"
    owner: root
    group: root
    mode: 0644
  when: ansible_pkg_mgr == 'yum'
- name: Untar the Pip packages
  unarchive:
    src: "{{ansible_env.HOME}}/pip_packages.tar.gz"
    dest: "{{ansible_env.HOME}}"
    remote_src: True
  when: ansible_pkg_mgr == 'yum'
- name: Copy get-pip.py on Machines
  become: yes
  copy:
    src: ../files/get-pip.py
    dest: "{{ansible_env.HOME}}"
    owner: root
    group: root
    mode: 0644
  when: ansible_pkg_mgr == 'yum'
- name: Install pip
  become: yes
  shell: "http_proxy={{ http_proxy }} python {{ansible_env.HOME}}/get-pip.py --no-index --find-links={{ansible_env.HOME}}/pip_packages/"
  when: ansible_pkg_mgr == 'yum'
- name: Install pip packages for Agent
  shell: "pip install --no-index --find-links='{{ansible_env.HOME}}/pip_packages/' requests pytz"
  when: ansible_pkg_mgr == 'yum'
#- name: Create Python Virtual Environment for Agent
#  command: ./deployment/checkpackages.sh -env
#  args:
#    chdir: "{{ansible_env.HOME}}/InsightAgent-master"
#  when: ansible_pkg_mgr != 'zypper'
- name: Download pip packages for Agent
  shell: http_proxy={{ http_proxy }} pip install requests pytz
  when: ansible_pkg_mgr == 'zypper'
- name: Deploy collectd Agent
  shell: "unset http_proxy https_proxy && ./deployment/install.sh
    -i {{ projectName }}
    -u {{ userName }}
    -k {{ licenseKey }}
    -s {{ samplingInterval }}
    -t collectd
    -w {{ reportingUrl }}"
  become: true
  args:
    chdir: "{{ansible_env.HOME}}/InsightAgent-master/"
- name: Delete Tar Bundle for Agent
  file:
    state: absent
    path: "{{ansible_env.HOME}}/insightagent.tar.gz"