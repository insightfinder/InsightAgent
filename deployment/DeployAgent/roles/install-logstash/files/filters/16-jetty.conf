filter{
    if [fields][log_type] == "jetty" {
        grok {
        patterns_dir => ["/etc/logstash/pattern"]
        match => { "message" => ["%{CUST_DATE:ts}"] }
        }

        date {
        match => [ "ts", "MMM dd, YYYY KK:mm:ss aa", "MMM  d, YYYY KK:mm:ss aa", "yyyy-MM-dd HH:mm:ss,SSS" , "EEE MMM d HH:mm:ss 'CST' yyyy", "ISO8601" ]
        target => "ts_event"
        }

        ### set time ###
        ruby { code => "event.set('ts_epoc', event.get('ts_event').to_i * 1000)" }

        mutate {
            add_field => {
                        "[msg][tag]" => "%{[beat][hostname]}"
                        "[msg][eventId]" => "%{ts_epoc}"
                        "[msg][data]" => "%{message}"
                        "output_type" => "InsightFinder"
            }
        }

        json_encode {
        source => "msg"
        target => "data"
        }
        
        ### grouping events ###
        aggregate {
        task_id => "%{host}"
        code => "
                    map['output_type'] = 'InsightFinder'
                    map['size'] ||= 0
                    map['count'] ||= 0
                    map['groupdata'] ||= []
                    map['groupdata'] << event.get('data')
                    map['size'] += (event.get('data').size + 20)
                    map['count'] += 1
                    map_meta.timeout = 0 if map['count'] == 999999 or (map['size'] + 400) > 999999
                    event.cancel()
                "
        push_previous_map_as_event => true
        push_map_as_event_on_timeout => true
        timeout => 10
        }
    }
}
  