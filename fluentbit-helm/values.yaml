insightfinder:
  projectName: ""
  userName: ""
  licenseKey: ""

replicaCount: 1

config:
  service: |
    [SERVICE]
        Flush         5
        Daemon        Off
        Log_Level     info
        HTTP_Server   On
        HTTP_Listen   0.0.0.0
        HTTP_Port     2020

  inputs: |
    [INPUT]
        Name              tail
        Tag               kube.*
        Path              /var/log/containers/*.log
        Parser            docker, cri
        DB                /var/log/flb_kube.db
        Exclude_Path      /var/log/containers/fluent-bit-*.log
        Mem_Buf_Limit     5MB
        Skip_Long_Lines   On
        Refresh_Interval  10

  filters: |
    [FILTER]
        Name                kubernetes
        Match               kube.*
        Kube_URL            https://kubernetes.default.svc:443
        Kube_CA_File        /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        Kube_Token_File     /var/run/secrets/kubernetes.io/serviceaccount/token
        Kube_Tag_Prefix     kube.var.log.containers.
        Merge_Log           Off
        K8S-Logging.Parser  Off
        K8S-Logging.Exclude Off

    [FILTER]
        Name    lua
        Match   kube.*
        script  /fluent-bit/scripts/clean_log.lua
        call    clean_log

    [FILTER]
        Name nest
        Match kube.*
        Operation lift
        Nested_under kubernetes
        Add_prefix kubernetes_

    [FILTER]
        Name modify
        Match kube.*
        Add log_type fluentbit
        Add project_name {{ .Values.insightfinder.projectName }}
        Copy kubernetes_container_name instance_name
        Add user_name {{ .Values.insightfinder.userName }}
        Add license_key {{ .Values.insightfinder.licenseKey }}

  outputs: |
    [OUTPUT]
        Name            http
        Match           *
        Host            <Logstash Host>
        Port            <Logstash HTTP Port>
        Format          json_lines
        json_date_key   timestamp
        Retry_Limit     False

    [OUTPUT]
        Name  stdout
        Match *
        Format          json_lines
        json_date_key   timestamp
        Retry_Limit     False

luaScripts:
  clean_log.lua: |
    function clean_log(tag, timestamp, record)
        local log = record["log"]
        if log ~= nil then
            -- Match and remove everything up to and including ' stdout X ' or ' stderr X ', where X is any uppercase letter
            local _, finish = string.find(log, " std%a%a?%s+[A-Z] ")
            if finish == nil then
                -- fallback: match ' stdout X ' or ' stderr X ' (legacy, single space)
                _, finish = string.find(log, " std%a+ [A-Z] ")
            end
            if finish ~= nil then
                record["log"] = string.sub(log, finish + 1)
            end
        end
        return 1, timestamp, record
    end